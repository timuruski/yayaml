#!/usr/bin/env ruby

require "psych"
require "optparse"

at_exit do
  Yay::Command.new.run
end

module Yay
  BOLD_RED = "\e[1m\e[38;5;1m"
  RESET = "\e[0m"

  class Command
    def initialize(args = ARGV)
      parser = OptionParser.new do |parser|
        parser.on("-d", "--debug") { $DEBUG = true }
        parser.on("-i", "--ignore-case") { |value| @ignore_case = value }
        parser.on("-p", "--search-path") { |value| @match_path = value }
      end

      parser.banner = "Usage yay [options] \"<search pattern>\" <inputs>"
      if args.empty?
        abort parser.help
      else
        parser.parse!
      end

      @search_pattern = args.shift
      @paths = args.flat_map { |filename| File.directory?(filename) ? Dir.glob("#{filename}/**/*.yml") : filename }
      @paths.delete("--")
    end

    def run
      if @paths.empty?
        warn "Reading from STDIN..." if STDIN.tty?
        parse_yaml(STDIN, "STDIN")
      else
        @paths.each do |path|
          File.open(path) do |file|
            parse_yaml(file, file.path)
          end
        end
      end
    end

    private def parse_yaml(input, filename)
      handler = YayHandler.new(@search_pattern, @match_path, @ignore_case, filename)
      Psych::Parser.new(handler).parse(input)
    end
  end

  # See these for details:
  # https://ruby-doc.org/3.2.2/exts/psych/Psych/Handler.html
  # https://github.com/ruby/psych/blob/master/lib/psych/handler.rb
  class YayHandler < Psych::Handler
    # State transitions:
    # branch -> start_map -> branch (no-op)
    # leaf -> start_map -> branch (no-op)
    # branch -> scalar -> leaf (push key)
    # leaf -> scalar -> leaf (pop key, handle value)
    # branch -> end_map -> branch (pop key)
    # leaf -> end_map -> branch (pop key)

    def initialize(search_pattern, match_path, ignore_case, filename, *args)
      @search_pattern = Regexp.new(search_pattern, ignore_case ? Regexp::IGNORECASE : nil)
      @ignore_case = ignore_case
      @match_path = match_path
      @filename = filename
    end

    def start_document(*args)
      debug "--> Start document #{@filename}"

      @state = :branch
      @prev = nil
      @keys = []
      @line = 0
      @col = 0
    end

    def start_mapping(*args)
      transition("start map") do
        case @state
        when :branch, :leaf
          @state = :branch
        else
          panic("start map")
        end
      end
    end

    def end_mapping
      transition("end map") do
        case @state
        when :branch, :leaf
          @state = :branch
          @keys.pop
        else
          panic("end map")
        end
      end
    end

    def scalar(value, *args)
      transition("scalar") do
        case @state
        when :branch
          @state = :leaf
          @keys.push(value)
        when :leaf
          @state = :branch
          handle_leaf(value)
          @keys.pop
        else
          panic("scalar")
        end
      end
    end

    def event_location(start_line, start_column, _end_line, _end_column)
      @line = start_line + 1
      @col = start_column + 1
    end

    private def handle_leaf(value)
      path = @keys.join(".")

      if @match_path
        if match = path.match(@search_pattern)
          if $stdout.tty?
            path_matched = path.sub(@search_pattern, "#{BOLD_RED}#{match}#{RESET}")
            puts "#{@filename}:#{@line} #{path_matched}: #{value}"
          else
            puts "#{@filename}:#{@line} #{path}: #{value}"
          end
        end
      else
        if match = value.match(@search_pattern)
          if $stdout.tty?
            value_matched = value.sub(@search_pattern, "#{BOLD_RED}#{match}#{RESET}")
            puts "#{@filename}:#{@line} #{path}: #{value_matched}"
          else
            puts "#{@filename}:#{@line} #{path}: #{value}"
          end
        end
      end
    end

    private def transition(event)
      @prev = @state
      yield
      debug "#@prev -> (#{event}) -> #@state"
    end

    private def debug(msg)
      warn msg if $DEBUG || ENV["DEBUG"]
    end

    private def panic(event)
      fail "Failed to parse #{event} at #{@filename}:#{@line}:#{@col}, state #{@state}"
    end
  end
end
